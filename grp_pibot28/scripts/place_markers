#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
import numpy as np


class MarkerArrayPublisher(Node):
    def __init__(self):
        super().__init__('marker_array_publisher')

        # Publisher et subscriber
        self.publisher = self.create_publisher(MarkerArray, '/slam_toolbox/graph_visualization', 10)
        self.subscription = self.create_subscription(Point, '/marker_to_place', self.marker_callback, 10)
        self.marker_array = MarkerArray()

        # Définition de la matrice de transformation homogène T
        self.theta = np.deg2rad(7)  # Angle de rotation (en radians)
        self.cos_theta = np.cos(self.theta)
        self.sin_theta = np.sin(self.theta)

        # Matrice de transformation (repère transformé vers repère d'origine)
        self.T = np.array([
            [1, 0, 0, 0],
            [0, self.cos_theta, -self.sin_theta, 115],
            [0, self.sin_theta, self.cos_theta, 345],
            [0, 0, 0, 1]
        ])

        # Inversion de la matrice de transformation
        self.T_inv = np.linalg.inv(self.T)

        self.get_logger().info("Node initialized and ready to subscribe to marker_to_place topic.")

    def transform_to_origin(self, x1, y1, z1):
        # Coordonnées homogènes
        point_transformed = np.array([x1, y1, z1, 1])

        # Transformation vers le repère d'origine
        point_origin = self.T_inv @ point_transformed

        # Extraction des coordonnées dans le repère d'origine
        return point_origin[:3]

    def create_marker(self, x, y, z, marker_id):
        marker = Marker()
        marker.header.frame_id = "map"  # Référentiel de la carte
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = "objects"
        marker.id = marker_id  # ID unique pour chaque marqueur
        marker.type = Marker.CYLINDER  # Type de marqueur
        marker.action = Marker.ADD

        # Position
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = z
        marker.pose.orientation.x = 0.0
        marker.pose.orientation.y = 0.0
        marker.pose.orientation.z = 0.0
        marker.pose.orientation.w = 1.0

        # Dimensions
        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.5

        # Couleur
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0
        marker.color.a = 1.0  # Opaque

        return marker

    def marker_callback(self, msg):
        x, y, z = self.transform_to_origin(msg.x, msg.y, msg.z)

        # Créer un marker
        marker_id = len(self.marker_array.markers) + 1  # ID unique pour chaque marker
        marker = self.create_marker(x, y, z, marker_id)

        # Ajouter au MarkerArray
        self.marker_array.markers.append(marker)

        # Publier le MarkerArray
        self.publisher.publish(self.marker_array)
        self.get_logger().info(f"Published marker ID {marker_id} at (x={x:.2f}, y={y:.2f}, z={z:.2f}).")


def main(args=None):
    rclpy.init(args=args)
    node = MarkerArrayPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
