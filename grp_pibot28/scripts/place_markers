#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
import numpy as np
import tf2_ros


class MarkerArrayPublisher(Node):
    def __init__(self):
        super().__init__('marker_array_publisher')

        self.marker_array = MarkerArray()
        self.display_marker_array = MarkerArray()
        self.marker_id_counter = 0  # Compteur pour attribuer des IDs uniques aux marqueurs
        self.display_marker_id_counter = 0  # Compteur pour les markers affichés

    def initializeROSnode(self):
        # Initialisation de TF Buffer et Listener
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        # Publisher et Subscriber
        self.publisher = self.create_publisher(MarkerArray, '/slam_toolbox/graph_visualization', 10)
        self.subscription = self.create_subscription(Point, '/marker_to_place', self.marker_callback, 10)

        # Timer pour publication continue
        self.timer = self.create_timer(1.0, self.publish_marker_array)  # Publier toutes les secondes

        self.get_logger().info("place_markers initialized")

    def lookup_transform_matrix(self, target_frame, source_frame):
        """
        Récupère une matrice de transformation entre deux frames.
        """
        try:
            transform = self.tf_buffer.lookup_transform(target_frame, source_frame, rclpy.time.Time())

            # Translation
            tx, ty, tz = (
                transform.transform.translation.x,
                transform.transform.translation.y,
                transform.transform.translation.z,
            )

            # Quaternion
            qx, qy, qz, qw = (
                transform.transform.rotation.x,
                transform.transform.rotation.y,
                transform.transform.rotation.z,
                transform.transform.rotation.w,
            )

            # Conversion du quaternion en matrice de transformation 4x4
            T = self.quaternion_to_matrix(qx, qy, qz, qw)
            T[:3, 3] = [tx, ty, tz]  # Ajout de la translation

            return T
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            self.get_logger().error(f"Could not get transform from {source_frame} to {target_frame}: {e}")
            return None

    def marker_callback(self, msg):
        """
        Callback pour traiter les données de points et ajouter un Marker dans le MarkerArray.
        """
        try:
            # Récupération des matrices de transformation
            T_camera_to_base = self.lookup_transform_matrix("base_link", "camera_link")
            T_base_to_map = self.lookup_transform_matrix("map", "base_link")

            if T_camera_to_base is None or T_base_to_map is None:
                # self.get_logger().error("Transformations non disponibles, abandon de l'opération.")
                return

            # Transformation des coordonnées
            point_camera = np.array([msg.x, msg.y, msg.z, 1.0])
            point_base = T_camera_to_base @ point_camera
            point_map = T_base_to_map @ point_base

            # Création d'un marker
            x, y, z = point_map[:3]
            self.marker_id_counter += 1
            marker = self.create_marker(x, y, z, self.marker_id_counter)

            # Ajout au MarkerArray
            self.marker_array.markers.append(marker)
            self.get_logger().info(f"Marker ajouté avec ID {self.marker_id_counter} à (x={x:.2f}, y={y:.2f}, z={z:.2f}).")

        except Exception as e:
            self.get_logger().error(f"Erreur dans marker_callback: {e}")

    def group_markers(self):
        """
        Regroupe les markers proches et crée un MarkerArray simplifié.
        """
        if not self.marker_array.markers:
            return

        # Récupérer les positions des markers
        positions = np.array([
            [m.pose.position.x, m.pose.position.y, m.pose.position.z]
            for m in self.marker_array.markers
        ])

        # Regroupement des markers avec une méthode simple (distance seuil)
        distance_threshold = 1.2
        grouped_positions = []
        visited = set()

        for i, pos in enumerate(positions):
            if i in visited:
                continue

            # Trouver tous les points proches
            group = [pos]
            visited.add(i)

            for j, other_pos in enumerate(positions):
                if j not in visited and np.linalg.norm(pos - other_pos) <= distance_threshold:
                    group.append(other_pos)
                    visited.add(j)

            # Calculer le centre du groupe
            grouped_positions.append(np.mean(group, axis=0))

        # Créer des markers moyens pour chaque groupe
        self.display_marker_array = MarkerArray()  # Réinitialiser l'array simplifié

        for avg_position in grouped_positions:
            self.display_marker_id_counter += 1
            marker = self.create_marker(avg_position[0], avg_position[1], avg_position[2], self.display_marker_id_counter)
            self.display_marker_array.markers.append(marker)

    def publish_marker_array(self):
        """
        Publie le MarkerArray à intervalles réguliers.
        """
        if self.marker_array.markers:
            self.group_markers()
            self.publisher.publish(self.display_marker_array)

    def create_marker(self, x, y, z, marker_id):
        """
        Crée un marker RViz à une position donnée.
        """
        marker = Marker()
        marker.header.frame_id = "map"
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = "objects"
        marker.id = marker_id
        marker.type = Marker.CYLINDER
        marker.action = Marker.ADD

        # Position
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = 0.25
        marker.pose.orientation.w = 1.0

        # Dimensions
        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.5

        # Couleur
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0
        marker.color.a = 1.0  # Opaque

        return marker

    def quaternion_to_matrix(self, qx, qy, qz, qw):
        """
        Convertit un quaternion (qx, qy, qz, qw) en une matrice de transformation 4x4.
        """
        # Normaliser le quaternion
        norm = np.sqrt(qx**2 + qy**2 + qz**2 + qw**2)
        if norm == 0.0:
            raise ValueError("Le quaternion ne peut pas être normalisé, sa norme est nulle.")
        qx, qy, qz, qw = qx / norm, qy / norm, qz / norm, qw / norm

        # Calcul de la matrice de rotation
        rotation_matrix = np.array([
            [1 - 2 * (qy**2 + qz**2), 2 * (qx * qy - qz * qw), 2 * (qx * qz + qy * qw)],
            [2 * (qx * qy + qz * qw), 1 - 2 * (qx**2 + qz**2), 2 * (qy * qz - qx * qw)],
            [2 * (qx * qz - qy * qw), 2 * (qy * qz + qx * qw), 1 - 2 * (qx**2 + qy**2)],
        ])

        # Construction de la matrice 4x4
        transformation_matrix = np.eye(4)
        transformation_matrix[:3, :3] = rotation_matrix

        return transformation_matrix


def main(args=None):
    rclpy.init(args=args)
    node = MarkerArrayPublisher()
    node.initializeROSnode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
