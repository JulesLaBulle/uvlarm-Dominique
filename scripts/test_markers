#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point

class MarkerArrayPublisher(Node):
    def __init__(self):
        super().__init__('marker_array_publisher')
        self.publisher = self.create_publisher(MarkerArray, '/slam_toolbox/graph_visualization', 10)
        self.timer = self.create_timer(1.0, self.publish_markers)

    def publish_markers(self):
        marker_array = MarkerArray()

        # Création de plusieurs marqueurs
        for i in range(5):  # Exemple : 5 marqueurs
            marker = Marker()
            marker.header.frame_id = "map"  # Référentiel de la carte
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.ns = "objects"
            marker.id = i  # ID unique pour chaque marqueur
            marker.type = Marker.CYLINDER  # Type de marqueur
            marker.action = Marker.ADD

            # Position unique pour chaque marqueur
            marker.pose.position.x = i * 1.0  # Espacé de 1m en x
            marker.pose.position.y = i * 0.5  # Espacé de 0.5m en y
            marker.pose.position.z = 0.25
            marker.pose.orientation.x = 0.0
            marker.pose.orientation.y = 0.0
            marker.pose.orientation.z = 0.0
            marker.pose.orientation.w = 1.0

            # Dimensions
            marker.scale.x = 0.1
            marker.scale.y = 0.1
            marker.scale.z = 0.5

            # Couleur
            marker.color.r = 0.0
            marker.color.g = 1.0
            marker.color.b = 0.0
            marker.color.a = 1.0  # Opaque

            # Ajout au MarkerArray
            marker_array.markers.append(marker)

        # Publier le tableau de marqueurs
        self.publisher.publish(marker_array)
        self.get_logger().info(f"Published {len(marker_array.markers)} markers")

def main(args=None):
    rclpy.init(args=args)
    node = MarkerArrayPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
